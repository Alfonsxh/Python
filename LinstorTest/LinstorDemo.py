#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
#=============================================================================
# FileName: LinstorDemo.py
# Desc:
# Author: chenhui.shang
# Email: chenhui.shang@woqutech.com
# HomePage: www.woqutech.com
# Version: 0.0.1
# LastChange:  2019/11/3 上午10:52
# History:
#=============================================================================
"""
import linstor

with linstor.Linstor("linstor://10.10.90.152:3370") as lin:
    node_list = lin.node_list()
    pass# This file was autogenerated by genconsts.py


# LINSTOR - management of distributed storage/DRBD9 resources
# Copyright (C) 2017 - 2019  LINBIT HA-Solutions GmbH
# Author: Robert Altnoeder, Roland Kammerer, Gabor Hernadi
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if sys.version_info > (3,):
    long = int

# ## Bits 62 - 63 (most significant 2) are reserved for the message type masks (error, warning, info)
# Bits 25 - 26 are reserved for the operation type masks (create, modify, delete)
# Bits 18 - 22 are reserved for the object type masks (node, resource, resource definition, ...)
# Bits 0  - 14 are reserved for codes ###
MASK_BITS_TYPE = long(0xC000000000000000)
MASK_ERROR = long(0xC000000000000000)
MASK_WARN = long(0x8000000000000000)
MASK_INFO = long(0x4000000000000000)
MASK_SUCCESS = long(0x0000000000000000)

# ## Operation type masks ###
MASK_BITS_OP = long(0x0000000003000000)
MASK_CRT = long(0x0000000001000000)
MASK_MOD = long(0x0000000002000000)
MASK_DEL = long(0x0000000003000000)

# ## Type masks (Node, ResDfn, Res, VolDfn, Vol, NetInterface, ...) ###
MASK_BITS_OBJ = long(0x00000000007C0000)
MASK_VLM_GRP = long(0x0000000000480000)
MASK_RSC_GRP = long(0x0000000000440000)
MASK_KVS = long(0x0000000000400000)
MASK_NODE = long(0x00000000003C0000)
MASK_RSC_DFN = long(0x0000000000380000)
MASK_RSC = long(0x0000000000340000)
MASK_VLM_DFN = long(0x0000000000300000)
MASK_VLM = long(0x00000000002C0000)
MASK_NODE_CONN = long(0x0000000000280000)
MASK_RSC_CONN = long(0x0000000000240000)
MASK_VLM_CONN = long(0x0000000000200000)
MASK_NET_IF = long(0x00000000001C0000)
MASK_STOR_POOL_DFN = long(0x0000000000180000)
MASK_STOR_POOL = long(0x0000000000140000)
MASK_CTRL_CONF = long(0x0000000000100000)
MASK_SNAPSHOT = long(0x00000000000C0000)

# ## Codes ###
MASK_BITS_CODE = long(0x0000000000007FFF)

# ## Codes 1-9: success ###
CREATED = long(1 | MASK_SUCCESS)
DELETED = long(2 | MASK_SUCCESS)
MODIFIED = long(3 | MASK_SUCCESS)
PASSPHRASE_ACCEPTED = long(4 | MASK_SUCCESS)

# ## Codes 100 - 999: failures ###

# ## Codes 100 - 199: sql failures ###
FAIL_SQL = long(100 | MASK_ERROR)
FAIL_SQL_ROLLBACK = long(101 | MASK_ERROR)

# ## Codes 200-299: invalid * failures ###
FAIL_INVLD_NODE_NAME = long(200 | MASK_ERROR)
FAIL_INVLD_NODE_TYPE = long(201 | MASK_ERROR)
FAIL_INVLD_RSC_NAME = long(202 | MASK_ERROR)
FAIL_INVLD_RSC_PORT = long(203 | MASK_ERROR)
FAIL_INVLD_NODE_ID = long(204 | MASK_ERROR)
FAIL_INVLD_VLM_NR = long(205 | MASK_ERROR)
FAIL_INVLD_VLM_SIZE = long(206 | MASK_ERROR)
FAIL_INVLD_MINOR_NR = long(207 | MASK_ERROR)
FAIL_INVLD_STOR_POOL_NAME = long(208 | MASK_ERROR)
FAIL_INVLD_NET_NAME = long(209 | MASK_ERROR)
FAIL_INVLD_NET_ADDR = long(210 | MASK_ERROR)
FAIL_INVLD_NET_PORT = long(211 | MASK_ERROR)
FAIL_INVLD_NET_TYPE = long(212 | MASK_ERROR)
FAIL_INVLD_PROP = long(213 | MASK_ERROR)
FAIL_INVLD_TRANSPORT_TYPE = long(214 | MASK_ERROR)
FAIL_INVLD_TCP_PORT = long(215 | MASK_ERROR)
FAIL_INVLD_CRYPT_PASSPHRASE = long(216 | MASK_ERROR)
FAIL_INVLD_ENCRYPT_TYPE = long(217 | MASK_ERROR)
FAIL_INVLD_SNAPSHOT_NAME = long(218 | MASK_ERROR)
FAIL_INVLD_PLACE_COUNT = long(219 | MASK_ERROR)
FAIL_INVLD_FREE_SPACE_MGR_NAME = long(220 | MASK_ERROR)
FAIL_INVLD_STOR_DRIVER = long(221 | MASK_ERROR)
FAIL_INVLD_DRBD_PROXY_COMPRESSION_TYPE = long(222 | MASK_ERROR)
FAIL_INVLD_KVS_NAME = long(223 | MASK_ERROR)
FAIL_INVLD_LAYER_KIND = long(224 | MASK_ERROR)
FAIL_INVLD_LAYER_STACK = long(225 | MASK_ERROR)
FAIL_INVLD_EXT_NAME = long(226 | MASK_ERROR)
FAIL_INVLD_PROVIDER = long(227 | MASK_ERROR)
FAIL_INVLD_VLM_SIZES = long(228 | MASK_ERROR)

# ## Codes 300-399: dependency not found failures ###
FAIL_NOT_FOUND_NODE = long(300 | MASK_ERROR)
FAIL_NOT_FOUND_RSC_DFN = long(301 | MASK_ERROR)
FAIL_NOT_FOUND_RSC = long(302 | MASK_ERROR)
FAIL_NOT_FOUND_VLM_DFN = long(303 | MASK_ERROR)
FAIL_NOT_FOUND_VLM = long(304 | MASK_ERROR)
FAIL_NOT_FOUND_NET_IF = long(305 | MASK_ERROR)
FAIL_NOT_FOUND_NODE_CONN = long(306 | MASK_ERROR)
FAIL_NOT_FOUND_RSC_CONN = long(307 | MASK_ERROR)
FAIL_NOT_FOUND_VLM_CONN = long(308 | MASK_ERROR)
FAIL_NOT_FOUND_STOR_POOL_DFN = long(309 | MASK_ERROR)
FAIL_NOT_FOUND_STOR_POOL = long(310 | MASK_ERROR)
FAIL_NOT_FOUND_DFLT_STOR_POOL = long(311 | MASK_ERROR)
FAIL_NOT_FOUND_CRYPT_KEY = long(312 | MASK_ERROR)
FAIL_NOT_FOUND_SNAPSHOT_DFN = long(313 | MASK_ERROR)
FAIL_NOT_FOUND_SNAPSHOT_VLM_DFN = long(314 | MASK_ERROR)
FAIL_NOT_FOUND_SNAPSHOT = long(315 | MASK_ERROR)
FAIL_NOT_FOUND_KVS = long(316 | MASK_ERROR)
FAIL_NOT_FOUND_RSC_GRP = long(317 | MASK_ERROR)
FAIL_NOT_FOUND_VLM_GRP = long(318 | MASK_ERROR)

# ## Codes 400-499: access denied failures ###
FAIL_ACC_DENIED_NODE = long(400 | MASK_ERROR)
FAIL_ACC_DENIED_RSC_DFN = long(401 | MASK_ERROR)
FAIL_ACC_DENIED_RSC = long(402 | MASK_ERROR)
FAIL_ACC_DENIED_VLM_DFN = long(403 | MASK_ERROR)
FAIL_ACC_DENIED_VLM = long(404 | MASK_ERROR)
FAIL_ACC_DENIED_STOR_POOL_DFN = long(405 | MASK_ERROR)
FAIL_ACC_DENIED_STOR_POOL = long(406 | MASK_ERROR)
FAIL_ACC_DENIED_NODE_CONN = long(407 | MASK_ERROR)
FAIL_ACC_DENIED_RSC_CONN = long(408 | MASK_ERROR)
FAIL_ACC_DENIED_VLM_CONN = long(409 | MASK_ERROR)
FAIL_ACC_DENIED_STLT_CONN = long(410 | MASK_ERROR)
FAIL_ACC_DENIED_CTRL_CFG = long(411 | MASK_ERROR)
FAIL_ACC_DENIED_COMMAND = long(412 | MASK_ERROR)
FAIL_ACC_DENIED_WATCH = long(413 | MASK_ERROR)
FAIL_ACC_DENIED_SNAPSHOT_DFN = long(414 | MASK_ERROR)
FAIL_ACC_DENIED_SNAPSHOT = long(415 | MASK_ERROR)
FAIL_ACC_DENIED_SNAPSHOT_VLM_DFN = long(416 | MASK_ERROR)
FAIL_ACC_DENIED_FREE_SPACE_MGR = long(417 | MASK_ERROR)
FAIL_ACC_DENIED_KVS = long(418 | MASK_ERROR)
FAIL_ACC_DENIED_RSC_GRP = long(419 | MASK_ERROR)
FAIL_ACC_DENIED_VLM_GRP = long(420 | MASK_ERROR)

# ## Codes 500-599: data already exists failures ###
FAIL_EXISTS_NODE = long(500 | MASK_ERROR)
FAIL_EXISTS_RSC_DFN = long(501 | MASK_ERROR)
FAIL_EXISTS_RSC = long(502 | MASK_ERROR)
FAIL_EXISTS_VLM_DFN = long(503 | MASK_ERROR)
FAIL_EXISTS_VLM = long(504 | MASK_ERROR)
FAIL_EXISTS_NET_IF = long(505 | MASK_ERROR)
FAIL_EXISTS_NODE_CONN = long(506 | MASK_ERROR)
FAIL_EXISTS_RSC_CONN = long(507 | MASK_ERROR)
FAIL_EXISTS_VLM_CONN = long(508 | MASK_ERROR)
FAIL_EXISTS_STOR_POOL_DFN = long(509 | MASK_ERROR)
FAIL_EXISTS_STOR_POOL = long(510 | MASK_ERROR)
FAIL_EXISTS_STLT_CONN = long(511 | MASK_ERROR)
FAIL_EXISTS_CRYPT_PASSPHRASE = long(512 | MASK_ERROR)
FAIL_EXISTS_WATCH = long(513 | MASK_ERROR)
FAIL_EXISTS_SNAPSHOT_DFN = long(514 | MASK_ERROR)
FAIL_EXISTS_SWORDFISH_TARGET_PER_RSC_DFN = long(515 | MASK_ERROR)
FAIL_EXISTS_SNAPSHOT = long(516 | MASK_ERROR)
FAIL_EXISTS_EXT_NAME = long(517 | MASK_ERROR)
FAIL_EXISTS_NVME_TARGET_PER_RSC_DFN = long(518 | MASK_ERROR)
FAIL_EXISTS_NVME_INITIATOR_PER_RSC_DFN = long(519 | MASK_ERROR)
FAIL_EXISTS_SWORDFISH_INITIATOR_PER_RSC_DFN = long(520 | MASK_ERROR)
FAIL_LOST_STOR_POOL = long(521 | MASK_ERROR)
FAIL_EXISTS_RSC_GRP = long(522 | MASK_ERROR)
FAIL_EXISTS_VLM_GRP = long(523 | MASK_ERROR)

# ## Codes 600-699: data missing failures ###
FAIL_MISSING_PROPS = long(600 | MASK_ERROR)
FAIL_MISSING_PROPS_NETCOM_TYPE = long(601 | MASK_ERROR)
FAIL_MISSING_PROPS_NETCOM_PORT = long(602 | MASK_ERROR)
FAIL_MISSING_NETCOM = long(603 | MASK_ERROR)
FAIL_MISSING_PROPS_NETIF_NAME = long(604 | MASK_ERROR)
FAIL_MISSING_STLT_CONN = long(605 | MASK_ERROR)
FAIL_MISSING_EXT_NAME = long(606 | MASK_ERROR)
FAIL_MISSING_SWORDFISH_TARGET = long(607 | MASK_ERROR)
FAIL_MISSING_NVME_TARGET = long(608 | MASK_ERROR)

# ## Codes 700-799: uuid mismatch failures ###
FAIL_UUID_NODE = long(700 | MASK_ERROR)
FAIL_UUID_RSC_DFN = long(701 | MASK_ERROR)
FAIL_UUID_RSC = long(702 | MASK_ERROR)
FAIL_UUID_VLM_DFN = long(703 | MASK_ERROR)
FAIL_UUID_VLM = long(704 | MASK_ERROR)
FAIL_UUID_NET_IF = long(705 | MASK_ERROR)
FAIL_UUID_NODE_CONN = long(706 | MASK_ERROR)
FAIL_UUID_RSC_CONN = long(707 | MASK_ERROR)
FAIL_UUID_VLM_CONN = long(708 | MASK_ERROR)
FAIL_UUID_STOR_POOL_DFN = long(709 | MASK_ERROR)
FAIL_UUID_STOR_POOL = long(710 | MASK_ERROR)
FAIL_UUID_KVS = long(711 | MASK_ERROR)

# ## Codes 800-899: number pools exhausted ###
FAIL_POOL_EXHAUSTED_VLM_NR = long(800 | MASK_ERROR)
FAIL_POOL_EXHAUSTED_MINOR_NR = long(801 | MASK_ERROR)
FAIL_POOL_EXHAUSTED_TCP_PORT = long(802 | MASK_ERROR)
FAIL_POOL_EXHAUSTED_NODE_ID = long(803 | MASK_ERROR)
FAIL_POOL_EXHAUSTED_RSC_LAYER_ID = long(804 | MASK_ERROR)

# ## Other failures ###
FAIL_STLT_DOES_NOT_SUPPORT_LAYER = long(988 | MASK_ERROR)
FAIL_STLT_DOES_NOT_SUPPORT_PROVIDER = long(989 | MASK_ERROR)
FAIL_STOR_POOL_CONFIGURATION_ERROR = long(990 | MASK_ERROR)
FAIL_INSUFFICIENT_REPLICA_COUNT = long(991 | MASK_ERROR)
FAIL_RSC_BUSY = long(992 | MASK_ERROR)
FAIL_INSUFFICIENT_PEER_SLOTS = long(993 | MASK_ERROR)
FAIL_SNAPSHOTS_NOT_SUPPORTED = long(994 | MASK_ERROR)
FAIL_NOT_CONNECTED = long(995 | MASK_ERROR)
FAIL_NOT_ENOUGH_NODES = long(996 | MASK_ERROR)
FAIL_IN_USE = long(997 | MASK_ERROR)
FAIL_UNKNOWN_ERROR = long(998 | MASK_ERROR)
FAIL_IMPL_ERROR = long(999 | MASK_ERROR)

# ## Codes 1000-9999: warnings ###
WARN_INVLD_OPT_PROP_NETCOM_ENABLED = long(1001 | MASK_WARN)
WARN_NOT_CONNECTED = long(1002 | MASK_WARN)
WARN_STLT_NOT_UPDATED = long(1003 | MASK_WARN)
WARN_NO_STLT_CONN_DEFINED = long(1004 | MASK_WARN)
WARN_DEL_UNSET_PROP = long(1005 | MASK_WARN)
WARN_RSC_ALREADY_DEPLOYED = long(1006 | MASK_WARN)
WARN_RSC_ALREADY_HAS_DISK = long(1007 | MASK_WARN)
WARN_RSC_ALREADY_DISKLESS = long(1008 | MASK_WARN)
WARN_ALL_DISKLESS = long(1009 | MASK_WARN)
WARN_STORAGE_ERROR = long(1010 | MASK_WARN)
WARN_STORAGE_KIND_ADDED = long(1012 | MASK_WARN)
WARN_NOT_FOUND_CRYPT_KEY = long(1011 | MASK_WARN)
WARN_NOT_FOUND = long(3000 | MASK_WARN)

# ## Codes 10000-19999: warnings ###
INFO_NO_RSC_SPAWNED = long(10000 | MASK_INFO)

# ## Special codes ###
UNKNOWN_API_CALL = long(0x0FFFFFFFFFFFFFFF | MASK_ERROR)
API_CALL_AUTH_REQ = long(0x0FFFFFFFFFFFFFFE | MASK_ERROR)
API_CALL_PARSE_ERROR = long(0x0FFFFFFFFFFFFFFD | MASK_ERROR)

# ## SignIn codes ###
SUCCESS_SIGN_IN = long(10000 | MASK_SUCCESS)
FAIL_SIGN_IN = long(10000 | MASK_ERROR)
FAIL_SIGN_IN_MISSING_CREDENTIALS = long(10001 | MASK_ERROR)

# ## Special answer message content types ###
# Textual MsgApiCallResponse responses
API_REPLY = str('Reply')
# Indicates that the immediate answers to the API call are complete
API_END_OF_IMMEDIATE_ANSWERS = str('EndOfImmediateAnswers')

# ## Create object APIs ###
API_CRT_NODE = str('CrtNode')
API_HOSTNAME = str('Hostname')
API_PREPARE_DISKS = str('PrepareDisks')
API_CRT_RSC = str('CrtRsc')
API_CRT_RSC_DFN = str('CrtRscDfn')
API_CRT_NET_IF = str('CrtNetIf')
API_CRT_VLM_DFN = str('CrtVlmDfn')
API_CRT_SNAPSHOT = str('CrtSnapshot')
API_CRT_STOR_POOL_DFN = str('CrtStorPoolDfn')
API_CRT_STOR_POOL = str('CrtStorPool')
API_CRT_NODE_CONN = str('CrtNodeConn')
API_CRT_RSC_CONN = str('CrtRscConn')
API_CRT_VLM_CONN = str('CrtVlmConn')
API_AUTO_PLACE_RSC = str('AutoPlaceRsc')
API_CRT_CRYPT_PASS = str('CrtCryptPass')
API_CRT_SF_TARGET_NODE = str('CrtSfTargetNode')
API_RESTORE_VLM_DFN = str('RestoreVlmDfn')
API_RESTORE_SNAPSHOT = str('RestoreSnapshot')
API_CRT_RSC_GRP = str('CrtRscGrp')
API_CRT_VLM_GRP = str('CrtVlmGrp')
API_SPAWN_RSC_DFN = str('SpawnRscDfn')

# ## Modify object APIs ###
API_MOD_NODE = str('ModNode')
API_MOD_NODE_CONN = str('ModNodeConn')
API_MOD_RSC = str('ModRsc')
API_TOGGLE_DISK = str('ToggleDisk')
API_MOD_RSC_CONN = str('ModRscConn')
API_MOD_RSC_DFN = str('ModRscDfn')
API_MOD_NET_IF = str('ModNetIf')
API_MOD_STOR_POOL = str('ModStorPool')
API_MOD_STOR_POOL_DFN = str('ModStorPoolDfn')
API_MOD_VLM_DFN = str('ModVlmDfn')
API_MOD_VLM = str('ModVlm')
API_MOD_VLM_CONN = str('ModVlmConn')
API_MOD_SNAPSHOT = str('ModSnapshot')
API_MOD_CRYPT_PASS = str('ModCryptPass')
API_ENABLE_DRBD_PROXY = str('EnableDrbdProxy')
API_DISABLE_DRBD_PROXY = str('DisableDrbdProxy')
API_MOD_DRBD_PROXY = str('ModifyDrbdProxy')
API_ROLLBACK_SNAPSHOT = str('RollbackSnapshot')
API_MOD_KVS = str('ModifyKvs')
API_MOD_RSC_GRP = str('ModifyRscGrp')
API_MOD_VLM_GRP = str('ModifyVlmGrp')

# ## Delete object APIs ###
API_DEL_NODE = str('DelNode')
API_DEL_RSC = str('DelRsc')
API_DEL_RSC_DFN = str('DelRscDfn')
API_DEL_NET_IF = str('DelNetIf')
API_DEL_VLM_DFN = str('DelVlmDfn')
API_DEL_STOR_POOL_DFN = str('DelStorPoolDfn')
API_DEL_STOR_POOL = str('DelStorPool')
API_DEL_NODE_CONN = str('DelNodeConn')
API_DEL_RSC_CONN = str('DelRscConn')
API_DEL_VLM_CONN = str('DelVlmConn')
API_DEL_SNAPSHOT = str('DelSnapshot')
API_DEL_KVS = str('DelKvs')
API_DEL_RSC_GRP = str('DelRscGrp')
API_DEL_VLM_GRP = str('DelVlmGrp')
API_LOST_NODE = str('LostNode')
API_LOST_STOR_POOL = str('LostStorPool')

# ## Authentication APIs ###
API_SIGN_IN = str('SignIn')
API_VERSION = str('Version')

# ## Debug APIs ###
API_CRT_DBG_CNSL = str('CrtDbgCnsl')
API_DSTR_DBG_CNSL = str('DstrDbgCnsl')

# ## Command APIs ###
API_CONTROL_CTRL = str('ControlCtrl')
API_CMD_SHUTDOWN = str('Shutdown')
API_NODE_RECONNECT = str('NodeReconnect')

# ## List object APIs ###
API_LST_NODE = str('LstNode')
API_LST_RSC = str('LstRsc')
API_LST_RSC_DFN = str('LstRscDfn')
API_LST_NET_IF = str('LstNetIf')
API_LST_VLM_DFN = str('LstVlmDfn')
API_LST_VLM = str('LstVlm')
API_LST_SNAPSHOT_DFN = str('LstSnapshotDfn')
API_LST_STOR_POOL = str('LstStorPool')
API_LST_STOR_POOL_DFN = str('LstStorPoolDfn')
API_LST_ERROR_REPORTS = str('LstErrorReports')
API_REQ_ERROR_REPORTS = str('ReqErrorReports')
API_REQ_RSC_CONN_LIST = str('ReqRscConnList')
API_LST_RSC_CONN = str('LstRscConn')
API_LST_KVS = str('LstKvs')
API_LST_RSC_GRP = str('LstRscGrp')
API_LST_VLM_GRP = str('LstVlmGrp')

# ## Query APIs ###
API_QRY_MAX_VLM_SIZE = str('QryMaxVlmSize')
API_RSP_MAX_VLM_SIZE = str('RspMaxVlmSize')

# ## Event APIs ###
API_CRT_WATCH = str('CrtWatch')
API_DEL_WATCH = str('DelWatch')
API_EVENT = str('Event')
API_RPT_SPC = str('RptSpc')
API_PING = str('Ping')
API_PONG = str('Pong')
API_MOD_INF = str('ModInf')
API_VSN_INF = str('VsnInf')
API_SET_CTRL_PROP = str('SetCtrlProp')
API_DEL_CTRL_PROP = str('DelCtrlProp')
API_LST_CTRL_PROPS = str('LstCtrlProps')

# ## Encryption APIs ###
API_ENTER_CRYPT_PASS = str('EnterCryptPass')

# ## Event stream actions ###
EVENT_STREAM_VALUE = str('Value')
EVENT_STREAM_CLOSE_NO_CONNECTION = str('CloseNoConnection')
EVENT_STREAM_CLOSE_REMOVED = str('CloseRemoved')

# ## Events ###
EVENT_VOLUME_DISK_STATE = str('VlmDiskState')
# State of resource based on DRBD status (or other underlying system)
EVENT_RESOURCE_STATE = str('ResourceState')

# ## Object property keys ###
KEY_KVS = str('Kvs')
KEY_UUID = str('UUID')
KEY_NODE = str('Node')
KEY_RSC_DFN = str('RscDfn')
KEY_RSC_GRP = str('RscGrp')
KEY_VLM_GRP = str('VlmGrp')
KEY_STOR_POOL_DFN = str('StorPoolDfn')
KEY_1ST_NODE = str('FirstNode')
KEY_2ND_NODE = str('SecondNode')
KEY_SNAPSHOT = str('Snapshot')
KEY_NODE_NAME = str('NodeName')
KEY_NODE_TYPE = str('NodeType')
KEY_NODE_FLAGS = str('NodeFlags')
KEY_NODE_ID = str('NodeId')
KEY_1ST_NODE_NAME = str('FirstNodeName')
KEY_2ND_NODE_NAME = str('SecondNodeName')
KEY_RSC_NAME = str('RscName')
KEY_STOR_POOL_NAME = str('StorPoolName')
KEY_STOR_POOL_DRBD_META_NAME = str('StorPoolNameDrbdMeta')
KEY_STOR_POOL_DRBD_META_TYPE = str('DrbdMetaType')
KEY_NET_IF_NAME = str('NetIfName')
KEY_SNAPSHOT_NAME = str('SnapshotName')
KEY_VLM_NR = str('VlmNr')
KEY_VLM_SIZE = str('VlmSize')
KEY_MINOR_NR = str('MinorNr')
KEY_PEER_COUNT = str('PeerCount')
KEY_AL_SIZE = str('AlSize')
KEY_AL_STRIPES = str('AlStripes')
KEY_ID = str('ID')
KEY_ROLE = str('Role')
KEY_MISSING_NAMESPC = str('MissingNameSpace')
KEY_VLM_RESTORE_FROM_RESOURCE = str('RestoreFromResource')
KEY_VLM_RESTORE_FROM_SNAPSHOT = str('RestoreFromSnapshot')
KEY_DRBD_CURRENT_GI = str('DrbdCurrentGi')
KEY_DRBD_BITMAP_GI = str('DrbdBitmapGi')
KEY_DRBD_HISTORY_1_GI = str('DrbdHistory1Gi')
KEY_DRBD_HISTORY_2_GI = str('DrbdHistory2Gi')
KEY_DMSTATS = str('DMStats')
KEY_SNAPSHOT_DFN_SEQUENCE_NUMBER = str('SequenceNumber')

# ## Property namespaces ###
NAMESPC_NETCOM = str('NetCom')
NAMESPC_DFLT = str('Default')
NAMESPC_LOGGING = str('Logging')
NAMESPC_ALLOC = str('Allocation')
NAMESPC_NETIF = str('NetIf')
NAMESPC_STLT = str('Satellite')
NAMESPC_STORAGE_DRIVER = str('StorDriver')
NAMESPC_DRBD_PROXY = str('DrbdProxy')
NAMESPC_AUXILIARY = str('Aux')
NAMESPC_DRBD_OPTIONS = str('DrbdOptions')
NAMESPC_DRBD_NET_OPTIONS = str('DrbdOptions/Net')
NAMESPC_DRBD_DISK_OPTIONS = str('DrbdOptions/Disk')
NAMESPC_DRBD_RESOURCE_OPTIONS = str('DrbdOptions/Resource')
NAMESPC_DRBD_PEER_DEVICE_OPTIONS = str('DrbdOptions/PeerDevice')
NAMESPC_DRBD_PROXY_OPTIONS = str('DrbdOptions/Proxy')
NAMESPC_DRBD_PROXY_COMPRESSION_OPTIONS = str('DrbdOptions/ProxyCompression')
NAMESPC_DRBD_HANDLER_OPTIONS = str('DrbdOptions/Handlers')
NAMESPC_CONNECTION_PATHS = str('Paths')
NAMESPC_REST = str('REST')
NAMESPC_FILESYSTEM = str('FileSystem')
NAMESPC_NVME = str('NVMe')
NAMESPC_SYS_FS = str('sys/fs')

# ## Storage pool property keys ###
KEY_STOR_POOL_VOLUME_GROUP = str('LvmVg')
KEY_STOR_POOL_LVCREATE_TYPE = str('LvcreateType')
KEY_STOR_POOL_THIN_POOL = str('ThinPool')
KEY_STOR_POOL_ZPOOL = str('ZPool')
KEY_STOR_POOL_ZPOOLTHIN = str('ZPoolThin')
KEY_STOR_POOL_FILE_DIRECTORY = str('FileDir')
KEY_STOR_POOL_SF_URL = str('SwordfishUrl')
KEY_STOR_POOL_SF_STOR_SVC = str('SwordfishStorSvc')
KEY_STOR_POOL_SF_STOR_POOL = str('SwordfishStorPool')
KEY_STOR_POOL_SF_USER_NAME = str('SwordfishUserName')
KEY_STOR_POOL_SF_USER_PW = str('SwordfishUserPw')
KEY_STOR_POOL_SF_POLL_TIMEOUT_VLM_CRT = str('SwordfishVolumeCreateTimeout')
KEY_STOR_POOL_SF_POLL_RETRIES_VLM_CRT = str('SwordfishVolumeCreateRetries')
KEY_STOR_POOL_SF_POLL_TIMEOUT_ATTACH_VLM = str('SwordfishAttachVolumeTimeout')
KEY_STOR_POOL_SF_POLL_RETRIES_ATTACH_VLM = str('SwordfishAttachVolumeRetries')
KEY_STOR_POOL_SF_POLL_TIMEOUT_GREP_NVME_UUID = str('SwordfishGrepNvmeUuidTimeout')
KEY_STOR_POOL_SF_POLL_RETRIES_GREP_NVME_UUID = str('SwordfishGrepNvmeUuidRetries')
KEY_STOR_POOL_SF_COMPOSED_NODE_NAME = str('SwordfishComposedNodeName')
KEY_STOR_POOL_SF_RETRY_COUNT = str('SwordfishRetryCount')
KEY_STOR_POOL_SF_RETRY_DELAY = str('SwordfishRetryDelay')
KEY_STOR_POOL_PREF_NIC = str('PrefNic')
KEY_STOR_POOL_CRYPT_PASSWD = str('CryptPasswd')
KEY_STOR_POOL_OVERRIDE_VLM_ID = str('OverrideVlmId')
KEY_STOR_POOL_DFN_MAX_OVERSUBSCRIPTION_RATIO = str('MaxOversubscriptionRatio')
KEY_STOR_POOL_WAIT_TIMEOUT_AFTER_CREATE = str('WaitTimeoutAfterCreate')

# ## Storage pool traits keys ###
KEY_STOR_POOL_SUPPORTS_SNAPSHOTS = str('SupportsSnapshots')
KEY_STOR_POOL_PROVISIONING = str('Provisioning')
# Unit of smallest allocation. The size in KiB as a decimal number.
KEY_STOR_POOL_ALLOCATION_UNIT = str('AllocationUnit')

# ## Storage pool traits values ###
VAL_STOR_POOL_PROVISIONING_FAT = str('Fat')
VAL_STOR_POOL_PROVISIONING_THIN = str('Thin')
VAL_STOR_POOL_DRBD_META_INTERNAL = str('.internal')

# ## DRBD Proxy keys (other than 'options') ###
KEY_DRBD_PROXY_COMPRESSION_TYPE = str('CompressionType')

# ## Property keys ###
KEY_PORT_NR = str('PortNr')
KEY_IP_ADDR = str('IPAddr')
KEY_NETCOM_TYPE = str('NetComType')
KEY_NETIF_NAME = str('NetIfName')
KEY_NETIF_TYPE = str('NetIfType')
KEY_NETCOM_ENABLED = str('NetComEnabled')
KEY_KEYSTORE = str('Keystore')
KEY_TRUSTSTORE = str('Truststore')
KEY_KEY_PWD = str('KeyPwd')
KEY_KEYSTORE_PWD = str('KeystorePwd')
KEY_TRUSTSTORE_PWD = str('TruststorePwd')
KEY_SSL_PROTO = str('SslProto')
KEY_TCP_PORT_AUTO_RANGE = str('TcpPortAutoRange')
KEY_MINOR_NR_AUTO_RANGE = str('MinorNrAutoRange')
KEY_GLOBAL_SEQ_API_CALLS = str('GlobSeqApiCalls')
KEY_SF_TARGET_PORT_AUTO_RANGE = str('SwordfishTargetPortAutoRange')
KEY_CUR_STLT_CONN_NAME = str('CurStltConnName')
KEY_PEER_SLOTS_NEW_RESOURCE = str('PeerSlotsNewResource')
KEY_PEER_SLOTS = str('PeerSlots')
KEY_ALLOW_LARGER_VOLUME_SIZE = str('AllowLargerVolumeSize')
KEY_RSC_ROLLBACK_TARGET = str('RollbackTarget')
KEY_RSC_MIGRATE_FROM = str('MigrateFrom')
KEY_BIND_ADDR = str('bindAddress')
KEY_BIND_PORT = str('port')
KEY_ENABLED = str('enabled')
KEY_TR_TYPE = str('enabled')
KEY_PORT = str('enabled')
KEY_PREF_NIC = str('PrefNic')
KEY_SEARCH_DOMAIN = str('SearchDomain')

# ## File system property keys ###
KEY_FS_TYPE = str('Type')
KEY_FS_MKFSPARAMETERS = str('MkfsParams')
VAL_FS_TYPE_EXT4 = str('ext4')
VAL_FS_TYPE_XFS = str('xfs')

# ## sys/fs property keys ###
KEY_SYS_FS_BLKIO_THROTTLE_READ = str('blkio_throttle_read')
KEY_SYS_FS_BLKIO_THROTTLE_WRITE = str('blkio_throttle_write')

# ## Property values ###
VAL_NETCOM_TYPE_SSL = str('SSL')
VAL_NETCOM_TYPE_PLAIN = str('Plain')
VAL_SSL_PROTO_TLSv1 = str('TLSv1')

# ## DRBD Proxy compression type property values ###
VAL_DRBD_PROXY_COMPRESSION_NONE = str('none')
VAL_DRBD_PROXY_COMPRESSION_ZLIB = str('zlib')
VAL_DRBD_PROXY_COMPRESSION_LZMA = str('lzma')
VAL_DRBD_PROXY_COMPRESSION_LZ4 = str('lz4')

# ## Node Type values ###
VAL_NODE_TYPE_CTRL = str('Controller')
VAL_NODE_TYPE_STLT = str('Satellite')
VAL_NODE_TYPE_CMBD = str('Combined')
VAL_NODE_TYPE_AUX = str('Auxiliary')
VAL_NODE_TYPE_SWFISH_TARGET = str('SWORDFISH_TARGET')

# ## Net interface Type values ###
VAL_NETIF_TYPE_IP = str('IP')
VAL_NETIF_TYPE_RDMA = str('RDMA')
VAL_NETIF_TYPE_ROCE = str('RoCE')

# ## Authentication keys ###
KEY_SEC_IDENTITY = str('SecIdentity')
KEY_SEC_ROLE = str('SecRole')
KEY_SEC_TYPE = str('SecType')
KEY_SEC_DOMAIN = str('SecDomain')
KEY_SEC_PASSWORD = str('SecPassword')

# ## External commands keys ###
KEY_EXT_CMD_WAIT_TO = str('ExtCmdWaitTimeout')

# ## Default ports ###
DFLT_CTRL_PORT_SSL = int(3377)
DFLT_CTRL_PORT_PLAIN = int(3376)
DFLT_STLT_PORT_SSL = int(3367)
DFLT_STLT_PORT_PLAIN = int(3366)

# ## Boolean values ###
VAL_TRUE = str('True')
VAL_FALSE = str('False')

# ## Flag string values ###
FLAG_CLEAN = str('CLEAN')
FLAG_DELETE = str('DELETE')
FLAG_DISKLESS = str('DISKLESS')
FLAG_QIGNORE = str('QIGNORE')
FLAG_ENCRYPTED = str('ENCRYPTED')
FLAG_SUCCESSFUL = str('SUCCESSFUL')
FLAG_FAILED_DEPLOYMENT = str('FAILED_DEPLOYMENT')
FLAG_FAILED_DISCONNECT = str('FAILED_DISCONNECT')
FLAG_RESIZE = str('RESIZE')
FLAG_DISK_ADDING = str('DISK_ADDING')
FLAG_DISK_ADD_REQUESTED = str('DISK_ADD_REQUESTED')
FLAG_DISK_REMOVING = str('DISK_REMOVING')
FLAG_DISK_REMOVE_REQUESTED = str('DISK_REMOVE_REQUESTED')

# ## Satellite connection statuses ###
CONN_STATUS_OFFLINE = int(0)
CONN_STATUS_CONNECTED = int(1)
CONN_STATUS_ONLINE = int(2)
CONN_STATUS_VERSION_MISMATCH = int(3)
CONN_STATUS_FULL_SYNC_FAILED = int(4)
CONN_STATUS_AUTHENTICATION_ERROR = int(5)
CONN_STATUS_UNKNOWN = int(6)
CONN_STATUS_HOSTNAME_MISMATCH = int(7)
CONN_STATUS_OTHER_CONTROLLER = int(8)
CONN_STATUS_AUTHENTICATED = int(9)
CONN_STATUS_NO_STLT_CONN = int(10)

# ## Default names ###
DEFAULT_NETIF = str('default')


if __name__ == "__main__":
    MAP_MASK = {
        'MASK_BITS_TYPE': MASK_BITS_TYPE,
        'MASK_ERROR': MASK_ERROR,
        'MASK_WARN': MASK_WARN,
        'MASK_INFO': MASK_INFO,
        'MASK_SUCCESS': MASK_SUCCESS,
        'MASK_BITS_OP': MASK_BITS_OP,
        'MASK_CRT': MASK_CRT,
        'MASK_MOD': MASK_MOD,
        'MASK_DEL': MASK_DEL,
        'MASK_BITS_OBJ': MASK_BITS_OBJ,
        'MASK_VLM_GRP': MASK_VLM_GRP,
        'MASK_RSC_GRP': MASK_RSC_GRP,
        'MASK_KVS': MASK_KVS,
        'MASK_NODE': MASK_NODE,
        'MASK_RSC_DFN': MASK_RSC_DFN,
        'MASK_RSC': MASK_RSC,
        'MASK_VLM_DFN': MASK_VLM_DFN,
        'MASK_VLM': MASK_VLM,
        'MASK_NODE_CONN': MASK_NODE_CONN,
        'MASK_RSC_CONN': MASK_RSC_CONN,
        'MASK_VLM_CONN': MASK_VLM_CONN,
        'MASK_NET_IF': MASK_NET_IF,
        'MASK_STOR_POOL_DFN': MASK_STOR_POOL_DFN,
        'MASK_STOR_POOL': MASK_STOR_POOL,
        'MASK_CTRL_CONF': MASK_CTRL_CONF,
        'MASK_SNAPSHOT': MASK_SNAPSHOT,
        'MASK_BITS_CODE': MASK_BITS_CODE,
        'CREATED': CREATED,
        'DELETED': DELETED,
        'MODIFIED': MODIFIED,
        'PASSPHRASE_ACCEPTED': PASSPHRASE_ACCEPTED,
        'FAIL_SQL': FAIL_SQL,
        'FAIL_SQL_ROLLBACK': FAIL_SQL_ROLLBACK,
        'FAIL_INVLD_NODE_NAME': FAIL_INVLD_NODE_NAME,
        'FAIL_INVLD_NODE_TYPE': FAIL_INVLD_NODE_TYPE,
        'FAIL_INVLD_RSC_NAME': FAIL_INVLD_RSC_NAME,
        'FAIL_INVLD_RSC_PORT': FAIL_INVLD_RSC_PORT,
        'FAIL_INVLD_NODE_ID': FAIL_INVLD_NODE_ID,
        'FAIL_INVLD_VLM_NR': FAIL_INVLD_VLM_NR,
        'FAIL_INVLD_VLM_SIZE': FAIL_INVLD_VLM_SIZE,
        'FAIL_INVLD_MINOR_NR': FAIL_INVLD_MINOR_NR,
        'FAIL_INVLD_STOR_POOL_NAME': FAIL_INVLD_STOR_POOL_NAME,
        'FAIL_INVLD_NET_NAME': FAIL_INVLD_NET_NAME,
        'FAIL_INVLD_NET_ADDR': FAIL_INVLD_NET_ADDR,
        'FAIL_INVLD_NET_PORT': FAIL_INVLD_NET_PORT,
        'FAIL_INVLD_NET_TYPE': FAIL_INVLD_NET_TYPE,
        'FAIL_INVLD_PROP': FAIL_INVLD_PROP,
        'FAIL_INVLD_TRANSPORT_TYPE': FAIL_INVLD_TRANSPORT_TYPE,
        'FAIL_INVLD_TCP_PORT': FAIL_INVLD_TCP_PORT,
        'FAIL_INVLD_CRYPT_PASSPHRASE': FAIL_INVLD_CRYPT_PASSPHRASE,
        'FAIL_INVLD_ENCRYPT_TYPE': FAIL_INVLD_ENCRYPT_TYPE,
        'FAIL_INVLD_SNAPSHOT_NAME': FAIL_INVLD_SNAPSHOT_NAME,
        'FAIL_INVLD_PLACE_COUNT': FAIL_INVLD_PLACE_COUNT,
        'FAIL_INVLD_FREE_SPACE_MGR_NAME': FAIL_INVLD_FREE_SPACE_MGR_NAME,
        'FAIL_INVLD_STOR_DRIVER': FAIL_INVLD_STOR_DRIVER,
        'FAIL_INVLD_DRBD_PROXY_COMPRESSION_TYPE': FAIL_INVLD_DRBD_PROXY_COMPRESSION_TYPE,
        'FAIL_INVLD_KVS_NAME': FAIL_INVLD_KVS_NAME,
        'FAIL_INVLD_LAYER_KIND': FAIL_INVLD_LAYER_KIND,
        'FAIL_INVLD_LAYER_STACK': FAIL_INVLD_LAYER_STACK,
        'FAIL_INVLD_EXT_NAME': FAIL_INVLD_EXT_NAME,
        'FAIL_INVLD_PROVIDER': FAIL_INVLD_PROVIDER,
        'FAIL_INVLD_VLM_SIZES': FAIL_INVLD_VLM_SIZES,
        'FAIL_NOT_FOUND_NODE': FAIL_NOT_FOUND_NODE,
        'FAIL_NOT_FOUND_RSC_DFN': FAIL_NOT_FOUND_RSC_DFN,
        'FAIL_NOT_FOUND_RSC': FAIL_NOT_FOUND_RSC,
        'FAIL_NOT_FOUND_VLM_DFN': FAIL_NOT_FOUND_VLM_DFN,
        'FAIL_NOT_FOUND_VLM': FAIL_NOT_FOUND_VLM,
        'FAIL_NOT_FOUND_NET_IF': FAIL_NOT_FOUND_NET_IF,
        'FAIL_NOT_FOUND_NODE_CONN': FAIL_NOT_FOUND_NODE_CONN,
        'FAIL_NOT_FOUND_RSC_CONN': FAIL_NOT_FOUND_RSC_CONN,
        'FAIL_NOT_FOUND_VLM_CONN': FAIL_NOT_FOUND_VLM_CONN,
        'FAIL_NOT_FOUND_STOR_POOL_DFN': FAIL_NOT_FOUND_STOR_POOL_DFN,
        'FAIL_NOT_FOUND_STOR_POOL': FAIL_NOT_FOUND_STOR_POOL,
        'FAIL_NOT_FOUND_DFLT_STOR_POOL': FAIL_NOT_FOUND_DFLT_STOR_POOL,
        'FAIL_NOT_FOUND_CRYPT_KEY': FAIL_NOT_FOUND_CRYPT_KEY,
        'FAIL_NOT_FOUND_SNAPSHOT_DFN': FAIL_NOT_FOUND_SNAPSHOT_DFN,
        'FAIL_NOT_FOUND_SNAPSHOT_VLM_DFN': FAIL_NOT_FOUND_SNAPSHOT_VLM_DFN,
        'FAIL_NOT_FOUND_SNAPSHOT': FAIL_NOT_FOUND_SNAPSHOT,
        'FAIL_NOT_FOUND_KVS': FAIL_NOT_FOUND_KVS,
        'FAIL_NOT_FOUND_RSC_GRP': FAIL_NOT_FOUND_RSC_GRP,
        'FAIL_NOT_FOUND_VLM_GRP': FAIL_NOT_FOUND_VLM_GRP,
        'FAIL_ACC_DENIED_NODE': FAIL_ACC_DENIED_NODE,
        'FAIL_ACC_DENIED_RSC_DFN': FAIL_ACC_DENIED_RSC_DFN,
        'FAIL_ACC_DENIED_RSC': FAIL_ACC_DENIED_RSC,
        'FAIL_ACC_DENIED_VLM_DFN': FAIL_ACC_DENIED_VLM_DFN,
        'FAIL_ACC_DENIED_VLM': FAIL_ACC_DENIED_VLM,
        'FAIL_ACC_DENIED_STOR_POOL_DFN': FAIL_ACC_DENIED_STOR_POOL_DFN,
        'FAIL_ACC_DENIED_STOR_POOL': FAIL_ACC_DENIED_STOR_POOL,
        'FAIL_ACC_DENIED_NODE_CONN': FAIL_ACC_DENIED_NODE_CONN,
        'FAIL_ACC_DENIED_RSC_CONN': FAIL_ACC_DENIED_RSC_CONN,
        'FAIL_ACC_DENIED_VLM_CONN': FAIL_ACC_DENIED_VLM_CONN,
        'FAIL_ACC_DENIED_STLT_CONN': FAIL_ACC_DENIED_STLT_CONN,
        'FAIL_ACC_DENIED_CTRL_CFG': FAIL_ACC_DENIED_CTRL_CFG,
        'FAIL_ACC_DENIED_COMMAND': FAIL_ACC_DENIED_COMMAND,
        'FAIL_ACC_DENIED_WATCH': FAIL_ACC_DENIED_WATCH,
        'FAIL_ACC_DENIED_SNAPSHOT_DFN': FAIL_ACC_DENIED_SNAPSHOT_DFN,
        'FAIL_ACC_DENIED_SNAPSHOT': FAIL_ACC_DENIED_SNAPSHOT,
        'FAIL_ACC_DENIED_SNAPSHOT_VLM_DFN': FAIL_ACC_DENIED_SNAPSHOT_VLM_DFN,
        'FAIL_ACC_DENIED_FREE_SPACE_MGR': FAIL_ACC_DENIED_FREE_SPACE_MGR,
        'FAIL_ACC_DENIED_KVS': FAIL_ACC_DENIED_KVS,
        'FAIL_ACC_DENIED_RSC_GRP': FAIL_ACC_DENIED_RSC_GRP,
        'FAIL_ACC_DENIED_VLM_GRP': FAIL_ACC_DENIED_VLM_GRP,
        'FAIL_EXISTS_NODE': FAIL_EXISTS_NODE,
        'FAIL_EXISTS_RSC_DFN': FAIL_EXISTS_RSC_DFN,
        'FAIL_EXISTS_RSC': FAIL_EXISTS_RSC,
        'FAIL_EXISTS_VLM_DFN': FAIL_EXISTS_VLM_DFN,
        'FAIL_EXISTS_VLM': FAIL_EXISTS_VLM,
        'FAIL_EXISTS_NET_IF': FAIL_EXISTS_NET_IF,
        'FAIL_EXISTS_NODE_CONN': FAIL_EXISTS_NODE_CONN,
        'FAIL_EXISTS_RSC_CONN': FAIL_EXISTS_RSC_CONN,
        'FAIL_EXISTS_VLM_CONN': FAIL_EXISTS_VLM_CONN,
        'FAIL_EXISTS_STOR_POOL_DFN': FAIL_EXISTS_STOR_POOL_DFN,
        'FAIL_EXISTS_STOR_POOL': FAIL_EXISTS_STOR_POOL,
        'FAIL_EXISTS_STLT_CONN': FAIL_EXISTS_STLT_CONN,
        'FAIL_EXISTS_CRYPT_PASSPHRASE': FAIL_EXISTS_CRYPT_PASSPHRASE,
        'FAIL_EXISTS_WATCH': FAIL_EXISTS_WATCH,
        'FAIL_EXISTS_SNAPSHOT_DFN': FAIL_EXISTS_SNAPSHOT_DFN,
        'FAIL_EXISTS_SWORDFISH_TARGET_PER_RSC_DFN': FAIL_EXISTS_SWORDFISH_TARGET_PER_RSC_DFN,
        'FAIL_EXISTS_SNAPSHOT': FAIL_EXISTS_SNAPSHOT,
        'FAIL_EXISTS_EXT_NAME': FAIL_EXISTS_EXT_NAME,
        'FAIL_EXISTS_NVME_TARGET_PER_RSC_DFN': FAIL_EXISTS_NVME_TARGET_PER_RSC_DFN,
        'FAIL_EXISTS_NVME_INITIATOR_PER_RSC_DFN': FAIL_EXISTS_NVME_INITIATOR_PER_RSC_DFN,
        'FAIL_EXISTS_SWORDFISH_INITIATOR_PER_RSC_DFN': FAIL_EXISTS_SWORDFISH_INITIATOR_PER_RSC_DFN,
        'FAIL_LOST_STOR_POOL': FAIL_LOST_STOR_POOL,
        'FAIL_EXISTS_RSC_GRP': FAIL_EXISTS_RSC_GRP,
        'FAIL_EXISTS_VLM_GRP': FAIL_EXISTS_VLM_GRP,
        'FAIL_MISSING_PROPS': FAIL_MISSING_PROPS,
        'FAIL_MISSING_PROPS_NETCOM_TYPE': FAIL_MISSING_PROPS_NETCOM_TYPE,
        'FAIL_MISSING_PROPS_NETCOM_PORT': FAIL_MISSING_PROPS_NETCOM_PORT,
        'FAIL_MISSING_NETCOM': FAIL_MISSING_NETCOM,
        'FAIL_MISSING_PROPS_NETIF_NAME': FAIL_MISSING_PROPS_NETIF_NAME,
        'FAIL_MISSING_STLT_CONN': FAIL_MISSING_STLT_CONN,
        'FAIL_MISSING_EXT_NAME': FAIL_MISSING_EXT_NAME,
        'FAIL_MISSING_SWORDFISH_TARGET': FAIL_MISSING_SWORDFISH_TARGET,
        'FAIL_MISSING_NVME_TARGET': FAIL_MISSING_NVME_TARGET,
        'FAIL_UUID_NODE': FAIL_UUID_NODE,
        'FAIL_UUID_RSC_DFN': FAIL_UUID_RSC_DFN,
        'FAIL_UUID_RSC': FAIL_UUID_RSC,
        'FAIL_UUID_VLM_DFN': FAIL_UUID_VLM_DFN,
        'FAIL_UUID_VLM': FAIL_UUID_VLM,
        'FAIL_UUID_NET_IF': FAIL_UUID_NET_IF,
        'FAIL_UUID_NODE_CONN': FAIL_UUID_NODE_CONN,
        'FAIL_UUID_RSC_CONN': FAIL_UUID_RSC_CONN,
        'FAIL_UUID_VLM_CONN': FAIL_UUID_VLM_CONN,
        'FAIL_UUID_STOR_POOL_DFN': FAIL_UUID_STOR_POOL_DFN,
        'FAIL_UUID_STOR_POOL': FAIL_UUID_STOR_POOL,
        'FAIL_UUID_KVS': FAIL_UUID_KVS,
        'FAIL_POOL_EXHAUSTED_VLM_NR': FAIL_POOL_EXHAUSTED_VLM_NR,
        'FAIL_POOL_EXHAUSTED_MINOR_NR': FAIL_POOL_EXHAUSTED_MINOR_NR,
        'FAIL_POOL_EXHAUSTED_TCP_PORT': FAIL_POOL_EXHAUSTED_TCP_PORT,
        'FAIL_POOL_EXHAUSTED_NODE_ID': FAIL_POOL_EXHAUSTED_NODE_ID,
        'FAIL_POOL_EXHAUSTED_RSC_LAYER_ID': FAIL_POOL_EXHAUSTED_RSC_LAYER_ID,
        'FAIL_STLT_DOES_NOT_SUPPORT_LAYER': FAIL_STLT_DOES_NOT_SUPPORT_LAYER,
        'FAIL_STLT_DOES_NOT_SUPPORT_PROVIDER': FAIL_STLT_DOES_NOT_SUPPORT_PROVIDER,
        'FAIL_STOR_POOL_CONFIGURATION_ERROR': FAIL_STOR_POOL_CONFIGURATION_ERROR,
        'FAIL_INSUFFICIENT_REPLICA_COUNT': FAIL_INSUFFICIENT_REPLICA_COUNT,
        'FAIL_RSC_BUSY': FAIL_RSC_BUSY,
        'FAIL_INSUFFICIENT_PEER_SLOTS': FAIL_INSUFFICIENT_PEER_SLOTS,
        'FAIL_SNAPSHOTS_NOT_SUPPORTED': FAIL_SNAPSHOTS_NOT_SUPPORTED,
        'FAIL_NOT_CONNECTED': FAIL_NOT_CONNECTED,
        'FAIL_NOT_ENOUGH_NODES': FAIL_NOT_ENOUGH_NODES,
        'FAIL_IN_USE': FAIL_IN_USE,
        'FAIL_UNKNOWN_ERROR': FAIL_UNKNOWN_ERROR,
        'FAIL_IMPL_ERROR': FAIL_IMPL_ERROR,
        'WARN_INVLD_OPT_PROP_NETCOM_ENABLED': WARN_INVLD_OPT_PROP_NETCOM_ENABLED,
        'WARN_NOT_CONNECTED': WARN_NOT_CONNECTED,
        'WARN_STLT_NOT_UPDATED': WARN_STLT_NOT_UPDATED,
        'WARN_NO_STLT_CONN_DEFINED': WARN_NO_STLT_CONN_DEFINED,
        'WARN_DEL_UNSET_PROP': WARN_DEL_UNSET_PROP,
        'WARN_RSC_ALREADY_DEPLOYED': WARN_RSC_ALREADY_DEPLOYED,
        'WARN_RSC_ALREADY_HAS_DISK': WARN_RSC_ALREADY_HAS_DISK,
        'WARN_RSC_ALREADY_DISKLESS': WARN_RSC_ALREADY_DISKLESS,
        'WARN_ALL_DISKLESS': WARN_ALL_DISKLESS,
        'WARN_STORAGE_ERROR': WARN_STORAGE_ERROR,
        'WARN_STORAGE_KIND_ADDED': WARN_STORAGE_KIND_ADDED,
        'WARN_NOT_FOUND_CRYPT_KEY': WARN_NOT_FOUND_CRYPT_KEY,
        'WARN_NOT_FOUND': WARN_NOT_FOUND,
        'INFO_NO_RSC_SPAWNED': INFO_NO_RSC_SPAWNED,
        'UNKNOWN_API_CALL': UNKNOWN_API_CALL,
        'API_CALL_AUTH_REQ': API_CALL_AUTH_REQ,
        'API_CALL_PARSE_ERROR': API_CALL_PARSE_ERROR,
        'SUCCESS_SIGN_IN': SUCCESS_SIGN_IN,
        'FAIL_SIGN_IN': FAIL_SIGN_IN,
        'FAIL_SIGN_IN_MISSING_CREDENTIALS': FAIL_SIGN_IN_MISSING_CREDENTIALS
    }
    TYPE_MASKS = [
        0xC000000000000000,  # TYPE
        0x0000000003000000,  # OPERATION
        0x00000000003C0000,  # OBJECT
        0xC00000000000FFFF   # ACTION
    ]

    for num_str in sys.argv[1:]:
        num = long(num_str)
        mask = []
        for type_mask in TYPE_MASKS:
            for key, mask_value in MAP_MASK.items():
                if num & type_mask == mask_value:
                    mask.append(key)
        print(num_str + " = " + " | ". join(mask))
